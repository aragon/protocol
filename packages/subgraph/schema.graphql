type Court @entity {
  id: ID!
  token: ERC20
  currentTerm: BigInt!
  termDuration: BigInt!
  feeToken: ERC20!
  guardianFee: BigInt!
  draftFee: BigInt!
  settleFee: BigInt!
  evidenceTerms: BigInt!
  commitTerms: BigInt!
  revealTerms: BigInt!
  appealTerms: BigInt!
  appealConfirmationTerms: BigInt!
  penaltyPct: Int!
  finalRoundReduction: Int!
  firstRoundGuardiansNumber: BigInt!
  appealStepFactor: BigInt!
  maxRegularAppealRounds: BigInt!
  finalRoundLockTerms: BigInt!
  appealCollateralFactor: BigInt!
  appealConfirmCollateralFactor: BigInt!
  minActiveBalance: BigInt!
  fundsGovernor: Bytes
  configGovernor: Bytes
  modulesGovernor: Bytes
  guardiansRegistry: GuardiansRegistryModule @derivedFrom(field: "court")
  paymentsBook: PaymentsBookModule @derivedFrom(field: "court")
  modules: [CourtModule!] @derivedFrom(field: "court")
  terms: [CourtTerm!] @derivedFrom(field: "court")
}

type CourtModule @entity {
  id: ID!
  court: Court!
  moduleId: String!
  type: CourtModuleType!
}

enum CourtModuleType {
  Unknown
  DisputeManager
  GuardiansRegistry
  Voting
  Treasury
  PaymentsBook
}

type CourtTerm @entity {
  id: ID!
  startTime: BigInt!
  randomnessBN: BigInt!
  randomness: Bytes
  court: Court!
  createdAt: BigInt!
}

type Dispute @entity {
  id: ID!
  subject: Bytes!
  evidences: [Evidence!] @derivedFrom(field: "dispute")
  createTermId: BigInt!
  possibleRulings: Int!
  finalRuling: Int!
  lastRoundId: BigInt!
  state: DisputeState!
  settledPenalties: Boolean!
  metadata: String!
  rawMetadata: Bytes!
  rounds: [AdjudicationRound!] @derivedFrom(field: "dispute")
  guardians: [GuardianDispute!] @derivedFrom(field: "dispute")
  txHash: String!
  createdAt: BigInt!
  ruledAt: BigInt
}

enum DisputeState {
  Evidence
  Drafting
  Adjudicating
  Ruled
}

type Evidence @entity {
  id: ID!
  dispute: Dispute!
  data: Bytes!
  submitter: Bytes!
  createdAt: BigInt!
}

type AdjudicationRound @entity {
  id: ID!
  number: BigInt!
  dispute: Dispute!
  state: AdjudicationState!
  stateInt: Int!
  draftTermId: BigInt!
  draftedTermId: BigInt
  guardiansNumber: BigInt!
  settledPenalties: Boolean!
  guardianFees: BigInt!
  guardians: [GuardianDraft!] @derivedFrom(field: "round")
  delayedTerms: BigInt!
  selectedGuardians: BigInt!
  coherentGuardians: BigInt!
  collectedTokens: BigInt!
  appeal: Appeal @derivedFrom(field: "round")
  vote: Vote
  createdAt: BigInt!
}

enum AdjudicationState {
  Invalid
  Committing
  Revealing
  Appealing
  ConfirmingAppeal
  Ended
}

type Appeal @entity {
  id: ID!
  round: AdjudicationRound!
  maker: Bytes!
  appealedRuling: BigInt!
  appealDeposit: BigInt!
  taker: Bytes!
  opposedRuling: BigInt!
  confirmAppealDeposit: BigInt!
  settled: Boolean!
  settledAt: BigInt
  confirmedAt: BigInt
  createdAt: BigInt!
}

type Vote @entity {
  id: ID!
  winningOutcome: OutcomeType!
  createdAt: BigInt!
}

enum OutcomeType {
  Missing
  Leaked
  Refused
  Against
  InFavor
}

type Guardian @entity {
  id: ID!
  treeId: BigInt!
  activeBalance: BigInt!
  lockedBalance: BigInt!
  availableBalance: BigInt!
  deactivationBalance: BigInt!
  withdrawalsLockTermId: BigInt!
  disputes: [GuardianDispute!] @derivedFrom(field: "guardian")
  drafts: [GuardianDraft!] @derivedFrom(field: "guardian")
  stakingMovements: [StakingMovement!] @derivedFrom(field: "guardian")
  shareClaims: [GuardianShareClaim!] @derivedFrom(field: "guardian")
  createdAt: BigInt!
}

type GuardianDispute @entity {
  id: ID!
  guardian: Guardian!
  dispute: Dispute!
}

type GuardianDraft @entity {
  id: ID!
  guardian: Guardian!
  round: AdjudicationRound!
  weight: BigInt!
  locked: BigInt!
  rewarded: Boolean!
  rewardedAt: BigInt
  commitment: Bytes
  commitmentBy: Bytes
  commitmentDate: BigInt
  revealDate: BigInt
  outcome: Int
  leaker: Bytes
  createdAt: BigInt!
}

type StakingMovement @entity {
  id: ID!
  guardian: Guardian!
  type: StakingMovementType!
  amount: BigInt!
  effectiveTermId: BigInt
  createdAt: BigInt!
}

enum StakingMovementType {
  Stake
  Unstake
  Activation
  Deactivation
  Lock
  Unlock
  Reward
  Slash
}

type GuardiansRegistryModule @entity {
  id: ID!
  court: Court!
  totalStaked: BigInt!
  totalActive: BigInt!
  totalDeactivation: BigInt!
}

type PaymentsBookModule @entity {
  id: ID!
  court: Court!
  currentPeriod: BigInt!
  periodDuration: BigInt!
  governorSharePct: BigInt!
  periods: [PaymentPeriod!] @derivedFrom(field: "book")
  payments: [PaymentReceipt!] @derivedFrom(field: "book")
  guardiansShares: [GuardiansShare!] @derivedFrom(field: "book")
  guardianShareClaims: [GuardianShareClaim!] @derivedFrom(field: "book")
}

type PaymentPeriod @entity {
  id: ID!
  book: PaymentsBookModule!
  balanceCheckpoint: BigInt!
  totalActiveBalance: BigInt!
  payments: [PaymentReceipt!] @derivedFrom(field: "period")
  guardiansShares: [GuardiansShare!] @derivedFrom(field: "period")
  guardiansClaims: [GuardianShareClaim!] @derivedFrom(field: "period")
  createdAt: BigInt!
}

type GuardiansShare @entity {
  id: ID!
  book: PaymentsBookModule!
  period: PaymentPeriod!
  token: ERC20!
  amount: BigInt!
}

type GuardianShareClaim @entity {
  id: ID!
  book: PaymentsBookModule!
  period: PaymentPeriod!
  token: ERC20!
  amount: BigInt!
  guardian: Guardian!
  createdAt: BigInt!
}

type PaymentReceipt @entity {
  id: ID!
  book: PaymentsBookModule!
  period: PaymentPeriod!
  token: ERC20!
  payer: Bytes!
  sender: Bytes!
  amount: BigInt!
  data: Bytes!
  createdAt: BigInt!
}

type TreasuryBalance @entity {
  id: ID!
  owner: Bytes!
  token: ERC20!
  amount: BigInt!
}

type FeeMovement @entity {
  id: ID!
  owner: Bytes!
  type: FeeMovementType!
  amount: BigInt!
  createdAt: BigInt!
}

enum FeeMovementType {
  Dispute
  Appeal
  Share
  Withdraw
}

type ERC20 @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}
